{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PokemonInfo","name","base","style","marginLeft","english","Paper","elevation","Object","keys","map","key","Title","styled","h1","Title2","h3","TwoColumnLayout","div","Container","useStyles","input","makeStyles","table","minWidth","App","React","useState","filter","filterSet","selectedItem","selectedItemSet","pokemons","pokemonSet","loading","loadingSet","classes","useEffect","a","fetch","then","res","json","data","console","log","fetchData","TextField","width","variant","onChange","evt","target","value","label","TableContainer","component","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","scope","pokemon","toLowerCase","includes","slice","id","type","join","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ce84ea18.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types'\nimport styled from '@emotion/styled'\nimport {\n  Button, Paper, Table, TableBody, TextField,\n  TableCell, TableContainer, TableHead, TableRow\n} from '@material-ui/core';\n\nconst PokemonRow = ({ pokemon, onSelect }) => (\n  <tr>\n    <td>{pokemon.name.english}</td>\n    <td>{pokemon.type.join(\", \")}</td>\n    <td>\n      <Button\n        variant=\"contained\"\n        onClick={() => onSelect(pokemon)}\n      >Select\n      </Button>\n    </td>\n  </tr>\n)\n\nPokemonRow.propTypes = {\n  pokemon: PropTypes.shape({\n    name: PropTypes.shape({\n      english: PropTypes.string\n    }),\n    type: PropTypes.arrayOf(PropTypes.string)\n  }),\n  onSelect: PropTypes.func\n}\n\nconst PokemonInfo = ({ name, base }) => (\n  <div style={{marginLeft: '2vw'}}>\n    <h1>{name.english}</h1>\n    <Paper elevation={3}>\n      <table>\n        <tbody>\n          {\n            Object.keys(base).map((key) => (\n              <tr key={key}>\n                <td>{key}</td>\n                <td>{base[key]}</td>\n              </tr>\n            ))\n          }\n        </tbody>\n      </table>\n    </Paper>\n  </div>\n)\n\nPokemonInfo.propTypes = {\n  name: PropTypes.shape({\n    english: PropTypes.string\n  }),\n  base: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    \"Sp. Attack\": PropTypes.number.isRequired,\n    \"Sp. Defense\": PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n  })\n}\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst Title2 = styled.h3`\n  text-align: center;\n  color: lightgreen\n`;\n\nconst TwoColumnLayout = styled.div`\n  display: grid;\n  grid-template-columns: 70% 30%;\n  grid-column-gap: 1re;\n  margin-top: 2vh;\n`;\n\nconst Container = styled.div`\n  margin: auto;\n  width: 800px;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  font-size: x-large;\n  padding: 0.2rem;\n`;\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 350,\n  },\n});\n\n\n\nfunction App() {\n\n  const [filter, filterSet] = React.useState(\"\")\n  const [selectedItem, selectedItemSet] = React.useState(null)\n  const [pokemons, pokemonSet] = React.useState([])\n  const [loading, loadingSet] = React.useState(false)\n  const classes = useStyles();\n\n  React.useEffect(() => {\n    async function fetchData() {\n      //https://jayr211988.github.io\n      loadingSet(true)\n      fetch(\"http://localhost:3000/r-web/pokemon.json\")\n        .then((res) => {\n          return res.json()\n        })\n        .then((data) => {\n          pokemonSet(data)\n          console.log(data, 'testset');\n          loadingSet(false)\n        })\n\n    }\n    fetchData();\n  }, [])\n\n  return (\n    <Container>\n      <Title>Hi! I'm Rogelio</Title>\n      <Title2>You can search your favorite anime character here</Title2>\n      <TextField\n        style={{width: '100%'}}\n        variant=\"outlined\"\n        onChange={(evt) => filterSet(evt.target.value)} \n        value={filter} \n        label=\"Enter you anime character here\" />\n      <div>\n        <TwoColumnLayout>\n          <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Name</TableCell>\n                  <TableCell align=\"center\">Type</TableCell>\n                  <TableCell align=\"center\">Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {\n                  loading ?\n                    <TableRow >\n                      <TableCell component=\"th\" scope=\"row\">\n                        Please wait loading...\n                      </TableCell>\n                    </TableRow> :\n                    <>\n                      {pokemons\n                        .filter((pokemon) => pokemon.name.english.toLowerCase().includes(filter.toLowerCase()))\n                        .slice(0, 20)\n                        .map((pokemon) => (\n                          <TableRow key={pokemon.id}>\n                            <TableCell component=\"th\" scope=\"row\">\n                              {pokemon.name.english}\n                            </TableCell>\n                            <TableCell align=\"center\">{pokemon.type.join(\", \")}</TableCell>\n                            <TableCell align=\"center\">\n                              <Button\n                                variant=\"contained\"\n                                onClick={() => selectedItemSet(pokemon)}\n                              > Select\n                          </Button>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                    </>\n                }\n              </TableBody>\n            </Table>\n          </TableContainer>\n          {\n            selectedItem && (\n              <PokemonInfo {...selectedItem} />\n            )\n          }\n        </TwoColumnLayout>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}